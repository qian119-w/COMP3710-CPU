<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>1</version>
  <attributes>
    <entry>
      <string>Width</string>
      <int>6</int>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>INST</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="-300" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>ALUOP</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="740" y="780"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RS1</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="740" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RS2</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="740" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>WS</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="740" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>STR</string>
        </entry>
      </elementAttributes>
      <pos x="740" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>WE</string>
        </entry>
      </elementAttributes>
      <pos x="740" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>DMUX</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="740" y="720"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>splitterSpreading</string>
          <int>3</int>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>16</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>11-11,10-8,6-4,2-0,15-12</string>
        </entry>
      </elementAttributes>
      <pos x="-260" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>textFontSize</string>
          <int>20</int>
        </entry>
        <entry>
          <string>Description</string>
          <string>opcode</string>
        </entry>
      </elementAttributes>
      <pos x="-300" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>textFontSize</string>
          <int>20</int>
        </entry>
        <entry>
          <string>Description</string>
          <string>Z</string>
        </entry>
      </elementAttributes>
      <pos x="-200" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>textFontSize</string>
          <int>20</int>
        </entry>
        <entry>
          <string>Description</string>
          <string>Rd</string>
        </entry>
      </elementAttributes>
      <pos x="-200" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>textFontSize</string>
          <int>20</int>
        </entry>
        <entry>
          <string>Description</string>
          <string>Ra</string>
        </entry>
      </elementAttributes>
      <pos x="-200" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>textFontSize</string>
          <int>20</int>
        </entry>
        <entry>
          <string>Description</string>
          <string>Rb</string>
        </entry>
      </elementAttributes>
      <pos x="-200" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>4</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1,1,1,1</string>
        </entry>
      </elementAttributes>
      <pos x="-220" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>All Tests</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    WE  ALUOP  RS1   RS2  WS  STR  LDR DMUX FLEN

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 1  (i)     (ra)  (rb) (rd)  0   X    0     1  #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1  X       (ra)  x    (rd)  0   1    1     0  #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0  X       (ra)  (rd)  X    1   X    X     0  #test str
	
	let imm = random(256);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          1  X       X      X   (rd)  0   X    2     0  #test movl

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>LDR</string>
        </entry>
      </elementAttributes>
      <pos x="740" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>ALUOP</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    ALUOP 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) (i)    #test add/sub/and/orr
end loop

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="780"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RS1</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    RS1  

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) (ra)  #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        (ra)  #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        (ra)  #test str

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RS2</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    RS2  

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) (rb) #test add/sub/and/orr
end loop
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        (rd) #test str

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>STR</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    STR 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0  #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0  #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1  #test str
	
	let imm = random(256);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          0  #test movl

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>WE</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    WE  

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 1  #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1  #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0  #test str
	
	let imm = random(256);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          1  #test movl

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>LDR</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    LDR 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) X    #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1    #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        X    #test str
	
	let imm = random(256);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          X    #test movl

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>DMUX</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    DMUX

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0  #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1  #test ldr
	
	let imm = random(256);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          2  #test movl

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="700"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>WS</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    WS 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) (rd)  #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        (rd)   #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        X     #test str
	
	let imm = random(256);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          (rd)  #test movl

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="140" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>1,1</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>2</string>
        </entry>
      </elementAttributes>
      <pos x="100" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>1,1</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>2</string>
        </entry>
      </elementAttributes>
      <pos x="100" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>1,1</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>2</string>
        </entry>
      </elementAttributes>
      <pos x="700" y="780"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Inputs</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="520" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>Inputs</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="560" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>Inputs</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="560" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes/>
      <pos x="-100" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="680" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>FLEN</string>
        </entry>
      </elementAttributes>
      <pos x="740" y="860"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes/>
      <pos x="-100" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes/>
      <pos x="-100" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes/>
      <pos x="500" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>FLEN</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                      	ZERO   FLEN 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  1     1   #test add/sub/and/orr
	((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  0     0 
	((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  X     1
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        	 X     0 #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        	 X     0 #test str
	
	let imm = random(256);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          	 X     0 #test movl

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="860"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>EXEC</string>
        </entry>
      </elementAttributes>
      <pos x="740" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>ZERO</string>
        </entry>
      </elementAttributes>
      <pos x="-300" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="680" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="680" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>EXEC</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                           ZERO   EXEC 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  1      1    #test add/sub/and/orr
	((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  0      0 
	((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  X      1   
end loop

	(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )         1      1    #test ldr
	(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )         0      0
	(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )         X      1  

	(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )         1      1     #test str
	(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )         0      0
	(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )         X      1 

	
	let imm = random(256);
	(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )           1      1    #test movl
	(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )           0      0 
	(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )           X      1 

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="860" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="500" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes/>
      <pos x="-100" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="640" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="640" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="680" y="840"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="640" y="840"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>NOP</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                           ZERO NOP EXEC

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  1   1  0 #test add/sub/and/orr
        ((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  1   0  1
	((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  0   1  0
	((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  0   0  0
	((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  X   1  0 
	((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0)  X   0  1
end loop

	(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 1   1  0 #test ldr
        (ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 1   0  1
	(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 0   1  0
	(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 0   0  0
	(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 X   1  0 
	(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 X   0  1

	(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 1   1  0 #test str
        (strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 1   0  1
	(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 0   1  0
	(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 0   0  0
	(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 X   1  0 
	(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )  	 X   0  1
	
	let imm = random(256);
	(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )  	 1   1  0 #test movl
        (movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )  	 1   0  1
	(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )  	 0   1  0
	(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )  	 0   0  0
	(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )  	 X   1  0 
	(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )  	 X   0  1

end loop
end loop
end loop</dataString>
          </testData>
        </entry>
        <entry>
          <string>enabled</string>
          <boolean>false</boolean>
        </entry>
      </elementAttributes>
      <pos x="860" y="40"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="-200" y="320"/>
      <p2 x="680" y="320"/>
    </wire>
    <wire>
      <p1 x="340" y="640"/>
      <p2 x="560" y="640"/>
    </wire>
    <wire>
      <p1 x="120" y="580"/>
      <p2 x="140" y="580"/>
    </wire>
    <wire>
      <p1 x="40" y="580"/>
      <p2 x="100" y="580"/>
    </wire>
    <wire>
      <p1 x="220" y="580"/>
      <p2 x="520" y="580"/>
    </wire>
    <wire>
      <p1 x="460" y="520"/>
      <p2 x="520" y="520"/>
    </wire>
    <wire>
      <p1 x="-180" y="520"/>
      <p2 x="-100" y="520"/>
    </wire>
    <wire>
      <p1 x="640" y="520"/>
      <p2 x="680" y="520"/>
    </wire>
    <wire>
      <p1 x="-60" y="520"/>
      <p2 x="80" y="520"/>
    </wire>
    <wire>
      <p1 x="80" y="520"/>
      <p2 x="280" y="520"/>
    </wire>
    <wire>
      <p1 x="280" y="520"/>
      <p2 x="300" y="520"/>
    </wire>
    <wire>
      <p1 x="640" y="840"/>
      <p2 x="680" y="840"/>
    </wire>
    <wire>
      <p1 x="20" y="780"/>
      <p2 x="700" y="780"/>
    </wire>
    <wire>
      <p1 x="720" y="780"/>
      <p2 x="740" y="780"/>
    </wire>
    <wire>
      <p1 x="620" y="460"/>
      <p2 x="680" y="460"/>
    </wire>
    <wire>
      <p1 x="-200" y="400"/>
      <p2 x="-160" y="400"/>
    </wire>
    <wire>
      <p1 x="-160" y="400"/>
      <p2 x="40" y="400"/>
    </wire>
    <wire>
      <p1 x="320" y="400"/>
      <p2 x="420" y="400"/>
    </wire>
    <wire>
      <p1 x="40" y="400"/>
      <p2 x="320" y="400"/>
    </wire>
    <wire>
      <p1 x="200" y="720"/>
      <p2 x="740" y="720"/>
    </wire>
    <wire>
      <p1 x="-300" y="80"/>
      <p2 x="500" y="80"/>
    </wire>
    <wire>
      <p1 x="280" y="340"/>
      <p2 x="700" y="340"/>
    </wire>
    <wire>
      <p1 x="620" y="660"/>
      <p2 x="740" y="660"/>
    </wire>
    <wire>
      <p1 x="400" y="600"/>
      <p2 x="520" y="600"/>
    </wire>
    <wire>
      <p1 x="80" y="600"/>
      <p2 x="100" y="600"/>
    </wire>
    <wire>
      <p1 x="-160" y="280"/>
      <p2 x="680" y="280"/>
    </wire>
    <wire>
      <p1 x="440" y="540"/>
      <p2 x="520" y="540"/>
    </wire>
    <wire>
      <p1 x="120" y="540"/>
      <p2 x="140" y="540"/>
    </wire>
    <wire>
      <p1 x="40" y="540"/>
      <p2 x="100" y="540"/>
    </wire>
    <wire>
      <p1 x="720" y="540"/>
      <p2 x="740" y="540"/>
    </wire>
    <wire>
      <p1 x="720" y="860"/>
      <p2 x="740" y="860"/>
    </wire>
    <wire>
      <p1 x="0" y="800"/>
      <p2 x="700" y="800"/>
    </wire>
    <wire>
      <p1 x="420" y="480"/>
      <p2 x="560" y="480"/>
    </wire>
    <wire>
      <p1 x="540" y="420"/>
      <p2 x="560" y="420"/>
    </wire>
    <wire>
      <p1 x="460" y="420"/>
      <p2 x="500" y="420"/>
    </wire>
    <wire>
      <p1 x="640" y="420"/>
      <p2 x="680" y="420"/>
    </wire>
    <wire>
      <p1 x="-200" y="420"/>
      <p2 x="-180" y="420"/>
    </wire>
    <wire>
      <p1 x="280" y="420"/>
      <p2 x="400" y="420"/>
    </wire>
    <wire>
      <p1 x="260" y="420"/>
      <p2 x="280" y="420"/>
    </wire>
    <wire>
      <p1 x="-180" y="420"/>
      <p2 x="60" y="420"/>
    </wire>
    <wire>
      <p1 x="60" y="420"/>
      <p2 x="260" y="420"/>
    </wire>
    <wire>
      <p1 x="580" y="100"/>
      <p2 x="600" y="100"/>
    </wire>
    <wire>
      <p1 x="600" y="100"/>
      <p2 x="740" y="100"/>
    </wire>
    <wire>
      <p1 x="-240" y="360"/>
      <p2 x="-220" y="360"/>
    </wire>
    <wire>
      <p1 x="-200" y="360"/>
      <p2 x="20" y="360"/>
    </wire>
    <wire>
      <p1 x="360" y="360"/>
      <p2 x="460" y="360"/>
    </wire>
    <wire>
      <p1 x="20" y="360"/>
      <p2 x="360" y="360"/>
    </wire>
    <wire>
      <p1 x="320" y="680"/>
      <p2 x="560" y="680"/>
    </wire>
    <wire>
      <p1 x="-240" y="300"/>
      <p2 x="-200" y="300"/>
    </wire>
    <wire>
      <p1 x="720" y="300"/>
      <p2 x="740" y="300"/>
    </wire>
    <wire>
      <p1 x="360" y="620"/>
      <p2 x="560" y="620"/>
    </wire>
    <wire>
      <p1 x="60" y="560"/>
      <p2 x="100" y="560"/>
    </wire>
    <wire>
      <p1 x="180" y="560"/>
      <p2 x="200" y="560"/>
    </wire>
    <wire>
      <p1 x="600" y="560"/>
      <p2 x="680" y="560"/>
    </wire>
    <wire>
      <p1 x="-240" y="240"/>
      <p2 x="740" y="240"/>
    </wire>
    <wire>
      <p1 x="260" y="880"/>
      <p2 x="680" y="880"/>
    </wire>
    <wire>
      <p1 x="-240" y="180"/>
      <p2 x="-160" y="180"/>
    </wire>
    <wire>
      <p1 x="-160" y="180"/>
      <p2 x="740" y="180"/>
    </wire>
    <wire>
      <p1 x="-160" y="500"/>
      <p2 x="-100" y="500"/>
    </wire>
    <wire>
      <p1 x="280" y="500"/>
      <p2 x="560" y="500"/>
    </wire>
    <wire>
      <p1 x="660" y="500"/>
      <p2 x="700" y="500"/>
    </wire>
    <wire>
      <p1 x="-60" y="500"/>
      <p2 x="160" y="500"/>
    </wire>
    <wire>
      <p1 x="160" y="500"/>
      <p2 x="220" y="500"/>
    </wire>
    <wire>
      <p1 x="660" y="820"/>
      <p2 x="700" y="820"/>
    </wire>
    <wire>
      <p1 x="720" y="440"/>
      <p2 x="740" y="440"/>
    </wire>
    <wire>
      <p1 x="-140" y="440"/>
      <p2 x="-100" y="440"/>
    </wire>
    <wire>
      <p1 x="-60" y="440"/>
      <p2 x="340" y="440"/>
    </wire>
    <wire>
      <p1 x="340" y="440"/>
      <p2 x="560" y="440"/>
    </wire>
    <wire>
      <p1 x="-300" y="120"/>
      <p2 x="-260" y="120"/>
    </wire>
    <wire>
      <p1 x="-240" y="120"/>
      <p2 x="-100" y="120"/>
    </wire>
    <wire>
      <p1 x="-60" y="120"/>
      <p2 x="500" y="120"/>
    </wire>
    <wire>
      <p1 x="600" y="380"/>
      <p2 x="660" y="380"/>
    </wire>
    <wire>
      <p1 x="-200" y="380"/>
      <p2 x="-140" y="380"/>
    </wire>
    <wire>
      <p1 x="660" y="380"/>
      <p2 x="700" y="380"/>
    </wire>
    <wire>
      <p1 x="-140" y="380"/>
      <p2 x="0" y="380"/>
    </wire>
    <wire>
      <p1 x="0" y="380"/>
      <p2 x="440" y="380"/>
    </wire>
    <wire>
      <p1 x="300" y="700"/>
      <p2 x="560" y="700"/>
    </wire>
    <wire>
      <p1 x="320" y="400"/>
      <p2 x="320" y="680"/>
    </wire>
    <wire>
      <p1 x="0" y="380"/>
      <p2 x="0" y="800"/>
    </wire>
    <wire>
      <p1 x="260" y="420"/>
      <p2 x="260" y="880"/>
    </wire>
    <wire>
      <p1 x="-200" y="300"/>
      <p2 x="-200" y="320"/>
    </wire>
    <wire>
      <p1 x="200" y="560"/>
      <p2 x="200" y="720"/>
    </wire>
    <wire>
      <p1 x="-140" y="380"/>
      <p2 x="-140" y="440"/>
    </wire>
    <wire>
      <p1 x="460" y="360"/>
      <p2 x="460" y="420"/>
    </wire>
    <wire>
      <p1 x="460" y="420"/>
      <p2 x="460" y="520"/>
    </wire>
    <wire>
      <p1 x="80" y="520"/>
      <p2 x="80" y="600"/>
    </wire>
    <wire>
      <p1 x="400" y="420"/>
      <p2 x="400" y="600"/>
    </wire>
    <wire>
      <p1 x="20" y="360"/>
      <p2 x="20" y="780"/>
    </wire>
    <wire>
      <p1 x="340" y="440"/>
      <p2 x="340" y="640"/>
    </wire>
    <wire>
      <p1 x="660" y="380"/>
      <p2 x="660" y="500"/>
    </wire>
    <wire>
      <p1 x="660" y="500"/>
      <p2 x="660" y="820"/>
    </wire>
    <wire>
      <p1 x="280" y="340"/>
      <p2 x="280" y="420"/>
    </wire>
    <wire>
      <p1 x="280" y="500"/>
      <p2 x="280" y="520"/>
    </wire>
    <wire>
      <p1 x="600" y="100"/>
      <p2 x="600" y="380"/>
    </wire>
    <wire>
      <p1 x="220" y="500"/>
      <p2 x="220" y="580"/>
    </wire>
    <wire>
      <p1 x="-160" y="180"/>
      <p2 x="-160" y="280"/>
    </wire>
    <wire>
      <p1 x="-160" y="400"/>
      <p2 x="-160" y="500"/>
    </wire>
    <wire>
      <p1 x="160" y="500"/>
      <p2 x="160" y="540"/>
    </wire>
    <wire>
      <p1 x="420" y="400"/>
      <p2 x="420" y="480"/>
    </wire>
    <wire>
      <p1 x="40" y="400"/>
      <p2 x="40" y="540"/>
    </wire>
    <wire>
      <p1 x="40" y="540"/>
      <p2 x="40" y="580"/>
    </wire>
    <wire>
      <p1 x="360" y="360"/>
      <p2 x="360" y="620"/>
    </wire>
    <wire>
      <p1 x="300" y="520"/>
      <p2 x="300" y="700"/>
    </wire>
    <wire>
      <p1 x="-180" y="420"/>
      <p2 x="-180" y="520"/>
    </wire>
    <wire>
      <p1 x="440" y="380"/>
      <p2 x="440" y="540"/>
    </wire>
    <wire>
      <p1 x="700" y="320"/>
      <p2 x="700" y="340"/>
    </wire>
    <wire>
      <p1 x="700" y="380"/>
      <p2 x="700" y="420"/>
    </wire>
    <wire>
      <p1 x="700" y="500"/>
      <p2 x="700" y="520"/>
    </wire>
    <wire>
      <p1 x="700" y="820"/>
      <p2 x="700" y="840"/>
    </wire>
    <wire>
      <p1 x="60" y="420"/>
      <p2 x="60" y="560"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>